Emmet - generates code inside vs code (powerful, smooth coding experience, best for front end dev)

html:5 enter - gives basic HTML structure

CDN - place where React library is hosted 
using CDN links in the script tag is one of the way(costly and many network calls happen) to bring react into our project which is not a preferred way
Other way is use npm since we already have it in node_modules
-------------------------------------------
props are attributes of an element that goes as children of that element
-------------------------------------------
const heading = React.createElement(
  "h1",
  { id: "heading", className: "randomClassName" }, ----- PROPS of h1 tag
  "Hello World from React!"
);
const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(heading);
-------------------------------------------
ReactElement(Object) ===> HTML(Browser Understands)

React.createElement ===> always creates an Object
that object becomes tag while rendering through render method
-------------------------------------------
core of react is :
React.createElement("div", { id: "child1" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ]),
  React.createElement("div", { id: "child2" }, [
    React.createElement("h1", {}, "I am h1 tag"),
    React.createElement("h2", {}, "I am h2 tag"),
  ])

JSX makes it easy while creating tags.
-------------------------------------------

Order of script tag files matter.

for example: app.js cannot be prior to reacr and reactdomcdn links
-------------------------------------------

git init : to initialise the git repository

git branch -M main : creates main as the main/master branch

---------------------------------------------------------------------------------------------

git and github are two different things --- Read about it

github is a place where one can host git repositories


.zsh

/dev/fd/13:18: command not found: compdef
jshree@JayashreesAir3 hello-react % git init
Initialized empty Git repository in /Users/jshree/Desktop/hello-react/.git/
jshree@JayashreesAir3 hello-react % git branch -M main
error: refname refs/heads/master not found
fatal: Branch rename failed
jshree@JayashreesAir3 hello-react % git branch -M main
error: refname refs/heads/master not found
fatal: Branch rename failed
jshree@JayashreesAir3 hello-react % git branch -m main
error: refname refs/heads/master not found
fatal: Branch rename failed
jshree@JayashreesAir3 hello-react % git add .
jshree@JayashreesAir3 hello-react % git commit -m "This is CLASS-01"
[master (root-commit) 62e9805] This is CLASS-01
 5 files changed, 129 insertions(+)
 create mode 100644 App.js
 create mode 100644 README.md
 create mode 100644 index.css
 create mode 100644 index.html
 create mode 100644 kt.txt
jshree@JayashreesAir3 hello-react % git remote add origin https://github.com/Jayasree-R1/hello-react.git
jshree@JayashreesAir3 hello-react % git branch -m main
jshree@JayashreesAir3 hello-react % git push origin main                                                
remote: Invalid username or password.
fatal: Authentication failed for 'https://github.com/Jayasree-R1/hello-react.git/'


I get into this issue too. The reason is that I didn't have any commit on this git repository.

When I run the command git branch -M main. I get the following error message.

error: refname refs/heads/master not found
fatal: Branch rename failed
After I add my first commit by the following command, all things work.

git add .
git commit -m 'Init'

jshree@JayashreesAir3 hello-react % git push origin main
Counting objects: 7, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (6/6), done.
Writing objects: 100% (7/7), 1.77 KiB | 1.77 MiB/s, done.
Total 7 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), done.
To https://github.com/Jayasree-R1/hello-react.git
 * [new branch]      main -> main
jshree@JayashreesAir3 hello-react % 
-------------------------------------------------------------------------------------
npm 
-standard repository for all the packages
-one of the biggest package managers
-all the libraries/packages utilities are hosted in npm
-bts works as a node package manager but does not abbreviate/stand for node package manager
-when you create a basic react app it already has npm in it but you should know how to use npm

jshree@JayashreesAir3 hello-react % npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (hello-react) 
version: (1.0.0) 
description: This is Hello React by Jayashree Rangu
entry point: (App.js) 
test command: jest
git repository: (https://github.com/Jayasree-R1/hello-react.git) 
keywords: react, hello react, jayashree rangu
author: ISC
license: (ISC) 
About to write to /Users/jshree/Desktop/hello-react/package.json:

{
  "name": "hello-react",
  "version": "1.0.0",
  "description": "This is Hello React by Jayashree Rangu",
  "main": "App.js",
  "scripts": {
    "test": "jest"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Jayasree-R1/hello-react.git"
  },
  "keywords": [
    "react",
    "hello",
    "react",
    "jayashree",
    "rangu"
  ],
  "author": "Jayashree Rangu",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/Jayasree-R1/hello-react/issues"
  },
  "homepage": "https://github.com/Jayasree-R1/hello-react#readme"
}


Is this OK? (yes) 
npm notice 
npm notice New major version of npm available! 7.24.0 -> 10.2.5
npm notice Changelog: https://github.com/npm/cli/releases/tag/v10.2.5
npm notice Run npm install -g npm@10.2.5 to update!
npm notice 
jshree@JayashreesAir3 hello-react % 

This results in a new file in the project called "package.json" (which is a configuration for npm)

npm - package manager - manages packages that we'll install -  packages are nothing but dependencies

npm will take care of the version of those packages in the package.json 

most imp package in project is 'bundler' and examples are webpack,parcel and vite etc

Bundlers bundle up Javascript,css, images and etc altogether

when we create a create react app uses webpack bundler and babel behind the scenes

In our current project we use 'parcel'
parcel is one of the best libraries out there which we will use to ignite our app.

if the app is skeleton parcel add ons the muscle to strengthen the app
parcel comes as the node package we install through npm

to install any dependency or package use : npm install -D parcel

why -D???

Dependencies are two types basically:
1.dev dependency : which is generally required in the development Phase
2.normal dependency : which is used in production

^ caret (^2.8.3) : to update minor(2.8.4) versions automatically 
~ tilde (^2.8.3) : to update major(3.8.4) versions automatically

npm install -D parcel
- above command adds parcel dependency and its version
- above command also results in new file called pacage-lock.json keeps 
  the recoed of exact version of that dependency installed

    pacage-lock.json is very imp as it keeps the hash of all the 
    versions on your machine that can be tracked when pushed to production
- this also installs a folder called "node_modules"

so basically, package.json is cnfiguration for npm
node_modules is the database 

package.json consists of the 'dependencies/packages' and its version but
node_modules consists of all the code of the dependencies/packages

node modules consists of lot of folders in it, since a dependency has inturn a lot of dependencies

node modules is a huge file and
absolutely no need to push it to git hub.
you can add them it to git ignore

but package.json and packagelock.json, 
should definitely be pushed to github

just by having the above files we can create node_modules folder by running "npm install" command

basically add only essential files in the git
--------------------------------------------------------------------------------
Ignite the app by 
"npx parcel index.html" : creates a development build and hosts it up on 1234 (by parcel)
here,
index.html is the source file of the object

Server running at http://localhost:1234
✨ Built in 639ms

so, parcel created a server(at port 1234) for us

npm install : installs a package
npx : EXECUTES a package
--------------------------------------------------------------------------------
CDN links is not a good way to bring react into project 
(why?)
fetching from cdn is a costly call

In the process of fetching from CDN a call is made to unpkg.com to get react but suppose if we already have react in our 
node modules(which we get from npm) it would be a lot easier to manage all our dependencies and react as well asone of the 
dependency

React is nothing but -libraries written in Javascript - which is hosted on npm.
One can get React into the project via npm
---------------------------------------------------------------------------------
npm install react, npm install react-dom (no -D since it is normal dependency not a development dependency)
which installs react and reactDOM dependency in package-lock.json, package.json and also 
under node_modules

install - i can also be used

<script type="module" src="./App.js"></script>

type="module" is to avoid browser script cannot contain imports
to say that the script tag is not the regular Javascript

At this step I faced a problem of 

Problem:
I am in the Episode 02 part 02 of "Igniting the App" section where we remove CDN links and add <script type="module" src="./App.js"></script>  in index.html & add
import React from "react";
import ReactDOM from "react-dom/client";
in app.js.

results in

Error: Expected content key de1e4a02ec63c4eb to exist

  Error: Expected content key de1e4a02ec63c4eb to exist
      at nullthrows (/Users/jshree/Desktop/hello-react/node_modules/nullthrows/nullthrows.js:7:15)
      at AssetGraph.getNodeIdByContentKey 

Solution:
delete parcel cache.
Clear the node_modules and reinstall the dependenices again. 

I deleted node_modules and ran npm install and npx parcel index.html to initiate server

----------------------------------------------------------

In our HTML we are injecting app.js , it treats app.js as a normal Javascript and normal JS does not have import

But in our App.js we have import statements.So to announce App.js as not a regular Javascript 
we write thetype as "module"

<script type="module" src="./App.js"></script>

and add
import React from "react";
import ReactDOM from "react-dom";
results in
Warning: You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".
fix:
import ReactDOM from "react-dom/client";
--------------------------------------------------------------------------

#Pracel
-Builds Dev Build
-Gives us a Local Server
-Hosts that Build in the local server
-HMR - Hot Module Replacement
(Automaatically refreshing browser also whch is called as)
-File watching Algorithms - written in c++
(Parcel uses file watching algorithm which is written in C++)
-Caching - Faster Builds (500ms to 13ms)
(Parcel is also Caching things for you which gives you Faster Builds)
/Users/jshree/Desktop/hello-react/.parcel-cache
-Image Optimization
-Minification of files(for Production Build)
-Bundling
-Compress
-Consistent Hashing (Read about it)
-code Splittig
-Differential Bundling - to support older Browsers
-Diagnostic
-Error Handling(better suggestions and neat)
-lets you Host on HTTPs
-Tree Shaking Algo - removes unused code
-Different dev and prod bundles

Read Parcel Documentation
parcel.js/org

PARCEL YOU BEAST!!!!

React apps are fast because react is not the only thing that is making a react app fast.
There are so many things in the background.
For example : Parcel (which inturn uses other libraries)

--------------------------------------------------------------------------
  "name": "hello-react",
  "version": "1.0.0",
  "description": "This is Hello React by Jayashree Rangu",
  "main": "App.js"

Remove 
"main": "App.js", from pakage.json since it gets in conflict with parcel where parcel sees index.html as 
an entry point whereas in package.json "main": "App.js" indicates app.js as entry point.

so remove that line before executing the below command
npx parcel build index.html --> prod build
- it'll bundle,minify and put all those files in "dist" folder (parcel-cache, node_modules, dist can be automatically generated and need not to be in github
just add them in gitignore)

1:48:02 - ep 02

Dev Build:
JayashreesAir3:hello-react jshree$ npx parcel index.html
Server running at http://localhost:1234

Prod Build:
JayashreesAir3:hello-react jshree$ npx parcel build index.html
✨ Built in 182ms

dist/index.html                461 B    409ms
dist/index.a7718008.css        131 B     87ms
dist/index.f7cee2b7.js     139.14 KB    411ms

All the code that is written, is compressed and minified to above 3 files.
The above 3 files are Production Ready Code which is highly optimised build and served to the end user

1:54 Ep-02

---------------------

Browserslist is an npm package (it needs some configuration)
goto browserlist.dev such a powerful tool

You have to tell yur project what all browsers should your app be supported in by adding browserslist in package.json
example:
"browserslist": [
    "last 2 chrome version",
    "last 2 Firefox version"
  ]
index.html upto now
  body>
    <div id="root">
      <!--<h1>Hello World from HTML!</h1>-->
      <!--
      <script>
        const heading = document.createElement("h1");
        heading.innerHTML = "Hello World! from JavaScript!";
        const main = document.getElementById("root");
        main.appendChild(heading);
      </script>
      -->
      <h1>Jshree is Here!</h1>
      <h1>Jshree is Here!</h1>
      <h1>Jshree is Here!</h1>
      <h1>Jshree is Here!</h1>
      <!-- <script
        crossorigin
        src="https://unpkg.com/react@18/umd/react.development.js"
      ></script>
      <script
        crossorigin
        src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"
      ></script> -->
      <script type="module" src="./App.js"></script>
    </div>
  </body>
</html>


app.js upto now


// const heading = React.createElement(
//   "h1",
//   { id: "heading", className: "randomClassName" },
//   "Hello World from React!"
// );

// const parent = React.createElement("div", { id: "parent" }, [
//   React.createElement("div", { id: "child1" }, [
//     React.createElement("h1", {}, "Hello React 🙋🏻‍♀️"),
//     React.createElement("h2", {}, "I am h2 tag"),
//   ]),
//   React.createElement("div", { id: "child2" }, [
//     React.createElement("h1", {}, "I am h1 tag"),
//     React.createElement("h2", {}, "I am h2 tag"),
//   ]),
// ]);

// //console.log(heading); // object not tag yet.
// console.log(parent);
// const root = ReactDOM.createRoot(document.getElementById("root"));
// //root.render(heading); // render function is to take the heading object and convert into heading tag and put it on the top
// root.render(parent);


----------------------------------------------------
instead of executing 
npx parcel index.html - to create a development build 
these commands are different for production build and development build

Instead of running the above comands again and again,
we create scripts

we create npm scripts in package.json to build our prod ready app

let us create a script to build our project in dev 
write as below in scripts in package.json
"start": "parcel inde.html",
"build": "parcel build index.html",

Above two commands can be used to see how a project is built in a new company

To run these scripts we use npm run start (since start is the mae of command)

ayashreesAir3:hello-react jshree$ npm run start

> hello-react@1.0.0 start
> parcel index.html

Server running at http://localhost:1234
✨ Built in 1.10s


npm start is the shortcut only for start through
npm start=npm run start (bts calls parcel index.html )
---------------
React.createElement creates an object 
when we render these react elements onto the DOM it becomes HTML element 
React.createElement(a React Element) ==> JS object ==> HTMLElement(render) we see on the browser


const heading = React.createElement(
  "h1",
  { id: "heading" },
  "Hello-to-React🙋🏻‍♀️"
);

//dealing with browsers => ReactDOM Package to display on the browser
const root = ReactDOM.createRoot(document.getElementById("root"));
//This root will be the root for react App
// whatever happens in React will happen in this Root

root.render(heading);

// REactDOM replaces everything in root with whatever is being rendered

// Everything in react is an object

----------------------

<div id="root">
  <h1>NOT Rendered!</h1>  
</div>

above structure looks  better than the below

const heading = React.createElement(
  "h1",
  { id: "heading" },
  "Hello-to-React🙋🏻‍♀️"
);

esp. when compared to create the nested structure

Facebook community came up with JSX

JSX - JS syntax easier to create HTML elements

JSX is NOT a part of React

REACT can be written WITHOUT JSX also but JSX makes a developers life easy.

JSX is separate and REACT is separate

-------------------------------------------------
Before FRAMEWORKS
different files for each below
html(skeleton & markup)>>css>>JS(logic)

FRAMEWORKS(ex: ANGULAR) and LIBRARIES (ex: REACT)
tries to merge all these things
html(skeleton & markup) + css + JS(logic)

JSX:
JS + HTML

NOTE: JSX is NOT HTML inside JavaScript!!! JSX is JSX. 😬
JSX is HTML LIKE  or XML LIKE SYNTAX

Creating an h1 tag without createElementex:
const JSXHeading = <h1> Hello React using JSX</h1>;

instead of 

const heading = React.createElement(
  "h1",
  { id: "heading" },
  "Hello React using core React🙋🏻‍♀️"
);
--------------------------------------------------------------------------------------
In
const JSXHeading = <h1 id="heading> Hello React using JSX</h1>;

<h1> Hello React using JSX</h1>; is JSX 
when the above is executed it becomes REACT Element
JSXHeading is a React Element (after execution)

JS Engine understand ES6 which is ECMA Script 6 and all other versions which is pure JS

Browser does not understand 
const JSXHeading = <h1 id="heading> Hello React using JSX</h1>;
Since above sentence is JSX and not JavaScript

Parcel is doing the JOB BTS 

code developed by us ==> it is transpiled before it goes to the JS engine 
and then JS engine receives the code that browsers can understand

transpiled: converted to te code that browsers/React can understand

who is transpiling??? PARCEL!!! but it takes help of a package called BABEL!!!

BABEL is a JS Package installed by PARCEL

node_modules>>@babel

As soon as you write something and save the file PARCEL builds it,
immediately BABEL transpiles the code that React understands.

BABEL is not created by JavaScript

But How is this code running??
React.createElement(a React Element) ==> JS Object ==> HTMLElement(render) we see on the browser

coming to JSX
JSX ==> React.createElement(a React Element) ==> JS Object ==> HTMLElement(render) we see on the browser

which is why 
heading object and JSXHeading are same objects

but who is converting this code??
BABEL it is!! BABEL is a champ in converting the code to adifferent kind of code.... 
BABEL is a transpiler, an Open sourec JS Compiler and many more
goto babeljs.io and see the magic

Beginning from now we don't use React.createElement instead we use JSX.
----------------------------------------------------------------------
Diff b/n JSX and HTML
in JSX we give as className="";
but in HTML it is class="";

<h1 className="JSXClass"> Hello React using JSX</h1>; JSX structure in App.js 
after execution is seen as 
<h1 class="JSXClass"> Hello React using JSX</h1> HTML structure in browser Element tab 

NOTE: if you need to give attributes in JSX it has to be in camelCase
HW: Explore various attributes of various tags
ex: how to <img>, <a>, etc in JSX 

If JSX is multiple lines wrap it in Paranthesis
-----------------------------------------------------------------------
Extensions Used:
Prettier
Bracket Pair Colorization Toggler
ES Lint
Better Comments
------------------------------------
upto now app.jsimport React from "react";
import ReactDOM from "react-dom/client";

const heading = React.createElement(
  "h1",
  { id: "heading" },
  "Hello React using core React"
);

console.log(heading);
//JSX
const JSXHeading = (
  <h1 className="JSXClass" tabIndex="5">
    Hello React using JSX
  </h1>
);
console.log(JSXHeading);

//dealing with browsers => ReactDOM Package to display on the browser
const root = ReactDOM.createRoot(document.getElementById("root"));
//This root will be the root for react App
// whatever happens in React will happen in this Root

root.render(JSXHeading);

// REactDOM replaces everything in root with whatever is being rendered

// Everything in react is an object
--------------------------------------------------------------------------
REACT COMPONENTS:

-EVERYTHING is a COMPONENT in React
ex: button, input box, Header, footer, drop down

React components ar two types:
1) CLASS Based components (older way of writing components)
- CLASS Based component uses JavaScript classes to create components
2) FUNCTIONAL Based Components (NEW way)
- FUNCTIONAL Based Components uses functions to create components
------------------------------------------------------------------------------
React Functional Component: is just a normal JS function which 
returns some JSX or React Element which can be nested as well.
NOTE: Capitalize the first letter of a React Componnet(Functional/Class) to avoid error

//React Functional Component (with normal function syntax) 
const HeadingComp = () => {
  return <h1> Hello React Functional Component</h1>;
};

Above syntax is explicit (very common)
You can skip the key word 'return' if it is just one line 

//React Functional Component (with Arrow Function Sytax)
const HeadingComp = () => {
  <h1> Hello React Functional Component</h1>;
}; 

or

//React Functional Component
const HeadingComp = () =><h1> Hello React Functional Component</h1>;

add paranthesis for multiple or nested React elements

//React Functional Component
const HeadingComp = () => (
  <div id="container">
    <h1> Hello React Functional Component</h1>;
  </div>
);

React element is easily converted to React Functional Component just by capitalizing the firts letter and making it an arrow function lol.


//React Element
const heading = (
  <h1 className="JSXClass" tabIndex="5">
    Hello React using JSX
  </h1>
);
//React Functional Component
const HeadingComp = () => (
  <div id="container">
    <h1> Hello React Functional Component</h1>
  </div>
);
------------------------------------------------------------------------------
 Diff b/n Element and Component??
-------------------------------------------------------------------------------
Ok, How to rebder a component??
root.render(HeadingComp) WRONG!!!!
root.render(<HeadingComp/>) CORRECT.
----------------------------------------------
onst Title = () => (
  <h1 className="JSXClass" tabIndex="5">
    Hello React using JSX
  </h1>
);

const HeadingComp = () => (
  <div id="container">
    <h1> Hello React Functional Component</h1>
  </div>
);


How to render Title Component inside HeadingComp in above code??

SOL:
const HeadingComp = () => (
  <div id="container">
    <Title/>
    <h1> Hello React Functional Component</h1>
  </div>
);

or

const HeadingComp = () => (
  <div id="container">
    <Title><Title/>
    <h1> Hello React Functional Component</h1>
  </div>
);

or

const HeadingComp = () => (
  <div id="container">
    {Title()} (since end of the data Title() is a JS function)
    <h1> Hello React Functional Component</h1>
  </div>
);

Above all are same

in browser we see the above code LIKE
<div id="container"><h1 class="JSXClass" tabindex="5">Hello React using JSX</h1><h1> Hello React Functional Component</h1></div>
-------------------------------------------------------------
//Component Composition
const HeadingComp = () => (
  <div id="container">
    <Title />
    <h1> Hello React Functional Component</h1>
  </div>
);
Above is called the Component Composition
-composing components into one another
----------------------------------------------------------------
How to render React Element in Functional Component
ok but, below point

Inside JSX withing the {  } you can run any piece of JavaScript code 
ex:
const HeadingComp = () => (
  <div id="container">
    <h2>{number + 456 + "Jayashree"}</h2>
    <Title />
    <h1> Hello React Functional Component</h1>
  </div>
);

so, now how to render React Element in Functional Component
//React Element
const titleElement = (
  <h1 className="JSXClass" tabIndex="5">
    Hello React using JSX
  </h1>
);

//React Func Comp
const TitleFuncComp = () => (
  <h1 className="JSXClass" tabIndex="5">
    Hello React using JSX
  </h1>
);

const number = 10000;

const HeadingComp = () => (
  <div id="container">
    <h2>{titleElement}</h2>
    <TitleFuncComp />
    <h1> Hello React Functional Component</h1>
  </div>
);
-------------------------------------------------------------
How to render React Element inside React Element

//React Element1
const elem = <span>eact element</span>;

//React Element2
const titleElement = (
  <h1 className="JSXClass" tabIndex="5">
    {elem}
    Hello React using JSX
  </h1>
);
--------------------------------------------------------------
NOTE: cants use something before initialization in JS
---------------------------------------------------------------
EP 3 : last 15 mins
---------------------------------------------------------------
JSX taks care of Injecting attacks and cross site scripting attacks
JSX sanitizes the data anything in between { }
----------------------------------------------------------------